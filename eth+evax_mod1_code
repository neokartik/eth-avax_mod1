// SPDX-License-Identifier: MIT
pragma solidity ^0.8.18;

contract School {
    address public owner;
    uint256 public studentCount;

    struct Student {
        uint256 id;
        string name;
        uint256 age;
        uint256 grade;
    }

    mapping(uint256 => Student) public students;

    constructor() {
        owner = msg.sender;
    }

    modifier onlyOwner() {
        require(msg.sender == owner, "Only the owner can perform this action");
        _;
    }

    event StudentAdded(uint256 id, string name, uint256 age, uint256 grade);
    event StudentUpdated(uint256 id, string name, uint256 age, uint256 grade);

    function addStudent(uint256 _id, string memory _name, uint256 _age, uint256 _grade) public onlyOwner {
        require(_age >= 5 && _age <= 18, "Age must be between 5 and 18");
        require(_grade >= 1 && _grade <= 12, "Grade must be between 1 and 12");

        students[_id] = Student(_id, _name, _age, _grade);
        studentCount++;

        emit StudentAdded(_id, _name, _age, _grade);
    }

    function updateStudent(uint256 _id, string memory _name, uint256 _age, uint256 _grade) public onlyOwner {
        require(_age >= 5 && _age <= 18, "Age must be between 5 and 18");
        require(_grade >= 1 && _grade <= 12, "Grade must be between 1 and 12");

        Student storage student = students[_id];
        if (bytes(student.name).length == 0) {
            revert("Student does not exist");
        }

        student.name = _name;
        student.age = _age;
        student.grade = _grade;

        emit StudentUpdated(_id, _name, _age, _grade);
    }

    function getStudent(uint256 _id) public view returns (string memory, uint256, uint256) {
        Student storage student = students[_id];
        require(bytes(student.name).length > 0, "Student does not exist");
        return (student.name, student.age, student.grade);
    }

    function totalStudents() public view returns (uint256) {
        assert(studentCount >= 0);
        return studentCount;
    }
}
